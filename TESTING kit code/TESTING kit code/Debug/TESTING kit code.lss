
TESTING kit code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  000008b2  00000946  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008001fe  008001fe  00000a44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe1  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000051f  00000000  00000000  00001b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000802  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  0000287c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a9  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000586  00000000  00000000  00002ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003267  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	dd c1       	rjmp	.+954    	; 0x3c4 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 3f       	cpi	r26, 0xFE	; 254
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	ae ef       	ldi	r26, 0xFE	; 254
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	89 d0       	rcall	.+274    	; 0x1d6 <main>
  c4:	f4 c3       	rjmp	.+2024   	; 0x8ae <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <interruptInit>:



void  interruptInit ()
{
	EICRA |= (1<<ISC10)|(1<<ISC11);
  c8:	ea e6       	ldi	r30, 0x6A	; 106
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8c 60       	ori	r24, 0x0C	; 12
  d0:	80 83       	st	Z, r24
	EIMSK = (1<<INT1);
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	89 bf       	out	0x39, r24	; 57
  d6:	08 95       	ret

000000d8 <flash>:
	command(0b00001110);
	
}
void flash()
{
	controlp |= 1<<e;
  d8:	94 9a       	sbi	0x12, 4	; 18
	asm volatile ("nop");
  da:	00 00       	nop
	asm volatile ("nop");
  dc:	00 00       	nop
	controlp &= ~(1<<e);
  de:	94 98       	cbi	0x12, 4	; 18
  e0:	08 95       	ret

000000e2 <busy>:
}
void busy()
{
	datad = 0;
  e2:	12 b8       	out	0x02, r1	; 2
	controlp |= 1<<rs;
  e4:	92 9a       	sbi	0x12, 2	; 18
	controlp &= ~(1<<rw);
  e6:	93 98       	cbi	0x12, 3	; 18
	while (PORTB >= 80)
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	80 35       	cpi	r24, 0x50	; 80
  ec:	20 f0       	brcs	.+8      	; 0xf6 <busy+0x14>
	{
		flash();
  ee:	f4 df       	rcall	.-24     	; 0xd8 <flash>
void busy()
{
	datad = 0;
	controlp |= 1<<rs;
	controlp &= ~(1<<rw);
	while (PORTB >= 80)
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	80 35       	cpi	r24, 0x50	; 80
  f4:	e0 f7       	brcc	.-8      	; 0xee <busy+0xc>
	{
		flash();
	}
	datad = 0b11111111;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	82 b9       	out	0x02, r24	; 2
  fa:	08 95       	ret

000000fc <command>:
}
void command(unsigned char x)
{
  fc:	cf 93       	push	r28
  fe:	c8 2f       	mov	r28, r24
	busy();
 100:	f0 df       	rcall	.-32     	; 0xe2 <busy>
	datap = x;
 102:	c3 b9       	out	0x03, r28	; 3
	controlp &= ~(1<<rs|1<<rw);
 104:	82 b3       	in	r24, 0x12	; 18
 106:	83 7f       	andi	r24, 0xF3	; 243
 108:	82 bb       	out	0x12, r24	; 18
	flash();
 10a:	e6 df       	rcall	.-52     	; 0xd8 <flash>
	datap = 0;
 10c:	13 b8       	out	0x03, r1	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	8f e9       	ldi	r24, 0x9F	; 159
 110:	9f e0       	ldi	r25, 0x0F	; 15
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <command+0x16>
 116:	00 c0       	rjmp	.+0      	; 0x118 <command+0x1c>
 118:	00 00       	nop
	_delay_ms(2);
}
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <startlcd>:
	dtostrf(j,6,2, number);
	string(number);
}
void startlcd()
{
	controld |= 1<<rs | 1<<rw | 1<<e;
 11e:	81 b3       	in	r24, 0x11	; 17
 120:	8c 61       	ori	r24, 0x1C	; 28
 122:	81 bb       	out	0x11, r24	; 17
 124:	8f e2       	ldi	r24, 0x2F	; 47
 126:	95 e7       	ldi	r25, 0x75	; 117
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <startlcd+0xa>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <startlcd+0x10>
 12e:	00 00       	nop
	_delay_ms(15);
	command(0x01);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	e4 df       	rcall	.-56     	; 0xfc <command>
	command(0x38);
 134:	88 e3       	ldi	r24, 0x38	; 56
 136:	e2 df       	rcall	.-60     	; 0xfc <command>
	command(0b00001110);
 138:	8e e0       	ldi	r24, 0x0E	; 14
 13a:	e0 cf       	rjmp	.-64     	; 0xfc <command>
 13c:	08 95       	ret

0000013e <data>:
	flash();
	datap = 0;
	_delay_ms(2);
}
void data(unsigned char y)
{
 13e:	cf 93       	push	r28
 140:	c8 2f       	mov	r28, r24
	
	busy();
 142:	cf df       	rcall	.-98     	; 0xe2 <busy>
	datap = y;
 144:	c3 b9       	out	0x03, r28	; 3
	controlp |= 1<<rs;
 146:	92 9a       	sbi	0x12, 2	; 18
	controlp &= ~(1<<rw);
 148:	93 98       	cbi	0x12, 3	; 18
	flash();
 14a:	c6 df       	rcall	.-116    	; 0xd8 <flash>
	datap = 0;
 14c:	13 b8       	out	0x03, r1	; 3
 14e:	8f e9       	ldi	r24, 0x9F	; 159
 150:	9f e0       	ldi	r25, 0x0F	; 15
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <data+0x14>
 156:	00 c0       	rjmp	.+0      	; 0x158 <data+0x1a>
 158:	00 00       	nop
	_delay_ms(2);
	len++;
 15a:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <__data_end>
 15e:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <__data_end+0x1>
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <__data_end+0x1>
 168:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <__data_end>
	if(len == 16)
 16c:	40 97       	sbiw	r24, 0x10	; 16
 16e:	11 f4       	brne	.+4      	; 0x174 <data+0x36>
	{
		command(0xC0);
 170:	80 ec       	ldi	r24, 0xC0	; 192
 172:	c4 df       	rcall	.-120    	; 0xfc <command>
	}
}
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <string>:
void string (char *z)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
	while (*z > 0)
 17e:	88 81       	ld	r24, Y
 180:	88 23       	and	r24, r24
 182:	29 f0       	breq	.+10     	; 0x18e <string+0x16>
 184:	21 96       	adiw	r28, 0x01	; 1
	{
		data(*z++);
 186:	db df       	rcall	.-74     	; 0x13e <data>
		command(0xC0);
	}
}
void string (char *z)
{
	while (*z > 0)
 188:	89 91       	ld	r24, Y+
 18a:	81 11       	cpse	r24, r1
 18c:	fc cf       	rjmp	.-8      	; 0x186 <string+0xe>
	{
		data(*z++);
	}
	len =0;
 18e:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <__data_end+0x1>
 192:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <__data_end>
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <displayNum>:
#include "lcd_lib.h"
int len=0;

void displayNum (int value){
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	c4 56       	subi	r28, 0x64	; 100
 1a6:	d1 09       	sbc	r29, r1
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1b2:	4a e0       	ldi	r20, 0x0A	; 10
 1b4:	be 01       	movw	r22, r28
 1b6:	6f 5f       	subi	r22, 0xFF	; 255
 1b8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ba:	46 d3       	rcall	.+1676   	; 0x848 <__itoa_ncheck>
	char number1[100];
	itoa(value,number1,10);
	//command(0x80);//set cursor at first line
	string(number1);//displaying number
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	db df       	rcall	.-74     	; 0x178 <string>
}
 1c2:	cc 59       	subi	r28, 0x9C	; 156
 1c4:	df 4f       	sbci	r29, 0xFF	; 255
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <main>:
int repeatCount = 0;
//int repeatCount2 = 0;

int main(void)
{
	DDRD &=~(1<<PIND5);
 1d6:	8d 98       	cbi	0x11, 5	; 17
	PORTD|=(1<<PIND5);
 1d8:	95 9a       	sbi	0x12, 5	; 18
	pwmInit();
 1da:	ab d1       	rcall	.+854    	; 0x532 <pwmInit>
	interruptInit();
 1dc:	75 df       	rcall	.-278    	; 0xc8 <interruptInit>
	startlcd();
 1de:	9f df       	rcall	.-194    	; 0x11e <startlcd>
	string("LCD is working");
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	c9 df       	rcall	.-110    	; 0x178 <string>
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	83 ed       	ldi	r24, 0xD3	; 211
 1ea:	90 e3       	ldi	r25, 0x30	; 48
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x16>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x20>
 1f6:	00 00       	nop
	_delay_ms(2000);
	command(0x01);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	7f df       	rcall	.-258    	; 0xfc <command>
	string("instructions");
 1fe:	8f e0       	ldi	r24, 0x0F	; 15
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	ba df       	rcall	.-140    	; 0x178 <string>
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	83 ed       	ldi	r24, 0xD3	; 211
 208:	90 e3       	ldi	r25, 0x30	; 48
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x34>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x3e>
 214:	00 00       	nop
	_delay_ms(2000);
	command(0x01);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	70 df       	rcall	.-288    	; 0xfc <command>
	string("modules to test");
 21c:	8c e1       	ldi	r24, 0x1C	; 28
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	ab df       	rcall	.-170    	; 0x178 <string>
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	83 ed       	ldi	r24, 0xD3	; 211
 226:	90 e3       	ldi	r25, 0x30	; 48
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0x52>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x5c>
 232:	00 00       	nop
	_delay_ms(2000);
	command(0x01);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	61 df       	rcall	.-318    	; 0xfc <command>
	string("1.servo testing");
 23a:	8c e2       	ldi	r24, 0x2C	; 44
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	9c df       	rcall	.-200    	; 0x178 <string>
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	89 e6       	ldi	r24, 0x69	; 105
 244:	98 e1       	ldi	r25, 0x18	; 24
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x70>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x7a>
 250:	00 00       	nop
	_delay_ms(1000);
	command(0x01);
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	52 df       	rcall	.-348    	; 0xfc <command>
	string("2.encoder testing");
 258:	8c e3       	ldi	r24, 0x3C	; 60
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	8d df       	rcall	.-230    	; 0x178 <string>
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	89 e6       	ldi	r24, 0x69	; 105
 262:	98 e1       	ldi	r25, 0x18	; 24
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x8e>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x98>
 26e:	00 00       	nop
	_delay_ms(1000);
	command(0x01);
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	43 df       	rcall	.-378    	; 0xfc <command>
	string("3.relay testing");
 276:	8e e4       	ldi	r24, 0x4E	; 78
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	7e df       	rcall	.-260    	; 0x178 <string>
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	89 e6       	ldi	r24, 0x69	; 105
 280:	98 e1       	ldi	r25, 0x18	; 24
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0xac>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0xb6>
 28c:	00 00       	nop
	_delay_ms(1000);
	command(0x01);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	34 df       	rcall	.-408    	; 0xfc <command>
	string("1.want to test servo");
 294:	8e e5       	ldi	r24, 0x5E	; 94
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	6f df       	rcall	.-290    	; 0x178 <string>
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	83 ed       	ldi	r24, 0xD3	; 211
 29e:	90 e3       	ldi	r25, 0x30	; 48
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0xca>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0xd4>
 2aa:	00 00       	nop
	_delay_ms(2000);
	command(0x01);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	25 df       	rcall	.-438    	; 0xfc <command>
	string("if yes, press reset button");
 2b2:	83 e7       	ldi	r24, 0x73	; 115
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	60 df       	rcall	.-320    	; 0x178 <string>
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	83 ed       	ldi	r24, 0xD3	; 211
 2bc:	90 e3       	ldi	r25, 0x30	; 48
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0xe8>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0xf2>
 2c8:	00 00       	nop
	_delay_ms(2000);
	command(0x01);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	16 df       	rcall	.-468    	; 0xfc <command>
	if(bit_is_clear(PIND,5)){
 2d0:	85 99       	sbic	0x10, 5	; 16
 2d2:	2c c0       	rjmp	.+88     	; 0x32c <main+0x156>
			string("start servo");
 2d4:	8e e8       	ldi	r24, 0x8E	; 142
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	4f df       	rcall	.-354    	; 0x178 <string>
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	83 ed       	ldi	r24, 0xD3	; 211
 2de:	90 e3       	ldi	r25, 0x30	; 48
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x10a>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0x114>
 2ea:	00 00       	nop
			_delay_ms(2000);
			command(0x01);
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	05 df       	rcall	.-502    	; 0xfc <command>
			string("starting angle 0");
 2f2:	8a e9       	ldi	r24, 0x9A	; 154
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	40 df       	rcall	.-384    	; 0x178 <string>
			func(angle);
 2f8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <angle>
 2fc:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <angle+0x1>
 300:	94 d0       	rcall	.+296    	; 0x42a <func>
			func(angle+90);
 302:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <angle>
 306:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <angle+0x1>
 30a:	86 5a       	subi	r24, 0xA6	; 166
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	8d d0       	rcall	.+282    	; 0x42a <func>
			func(angle+180);
 310:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <angle>
 314:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <angle+0x1>
 318:	8c 54       	subi	r24, 0x4C	; 76
 31a:	9f 4f       	sbci	r25, 0xFF	; 255
 31c:	86 d0       	rcall	.+268    	; 0x42a <func>
			repeatCount=1;	
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <repeatCount+0x1>
 326:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <repeatCount>
 32a:	27 c0       	rjmp	.+78     	; 0x37a <main+0x1a4>
	}
	else{
			string("2.want to test encoder");
 32c:	8b ea       	ldi	r24, 0xAB	; 171
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	23 df       	rcall	.-442    	; 0x178 <string>
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	83 ed       	ldi	r24, 0xD3	; 211
 336:	90 e3       	ldi	r25, 0x30	; 48
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x162>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0x16c>
 342:	00 00       	nop
			_delay_ms(2000);
			command(0x01);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	d9 de       	rcall	.-590    	; 0xfc <command>
			string("if yes, press reset button");
 34a:	83 e7       	ldi	r24, 0x73	; 115
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	14 df       	rcall	.-472    	; 0x178 <string>
 350:	2f ef       	ldi	r18, 0xFF	; 255
 352:	83 ed       	ldi	r24, 0xD3	; 211
 354:	90 e3       	ldi	r25, 0x30	; 48
 356:	21 50       	subi	r18, 0x01	; 1
 358:	80 40       	sbci	r24, 0x00	; 0
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	e1 f7       	brne	.-8      	; 0x356 <main+0x180>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <main+0x18a>
 360:	00 00       	nop
			_delay_ms(2000);
			command(0x01);
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	ca de       	rcall	.-620    	; 0xfc <command>
			if(bit_is_clear(PIND,5)){
 368:	85 99       	sbic	0x10, 5	; 16
 36a:	07 c0       	rjmp	.+14     	; 0x37a <main+0x1a4>
				sei();
 36c:	78 94       	sei
				repeatCount = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <repeatCount+0x1>
 376:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <repeatCount>
			}		
	}
	if(repeatCount == 0){	
 37a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <repeatCount>
 37e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <repeatCount+0x1>
 382:	89 2b       	or	r24, r25
 384:	f1 f4       	brne	.+60     	; 0x3c2 <main+0x1ec>
		string("3.want to test relay");
 386:	82 ec       	ldi	r24, 0xC2	; 194
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	f6 de       	rcall	.-532    	; 0x178 <string>
 38c:	2f ef       	ldi	r18, 0xFF	; 255
 38e:	83 ed       	ldi	r24, 0xD3	; 211
 390:	90 e3       	ldi	r25, 0x30	; 48
 392:	21 50       	subi	r18, 0x01	; 1
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <main+0x1bc>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <main+0x1c6>
 39c:	00 00       	nop
		_delay_ms(2000);
		command(0x01);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	ac de       	rcall	.-680    	; 0xfc <command>
		string("test relay");
 3a4:	8c ec       	ldi	r24, 0xCC	; 204
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	e7 de       	rcall	.-562    	; 0x178 <string>
 3aa:	2f ef       	ldi	r18, 0xFF	; 255
 3ac:	83 ed       	ldi	r24, 0xD3	; 211
 3ae:	90 e3       	ldi	r25, 0x30	; 48
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	80 40       	sbci	r24, 0x00	; 0
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <main+0x1da>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x1e4>
 3ba:	00 00       	nop
		_delay_ms(2000);
		command(0x01);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	9d de       	rcall	.-710    	; 0xfc <command>
	
    /* Replace with your application code */
    while (1)
    {
	
	}
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <main+0x1ec>

000003c4 <__vector_2>:
}
ISR(INT1_vect)
{
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	0b b6       	in	r0, 0x3b	; 59
 3d0:	0f 92       	push	r0
 3d2:	2f 93       	push	r18
 3d4:	3f 93       	push	r19
 3d6:	4f 93       	push	r20
 3d8:	5f 93       	push	r21
 3da:	6f 93       	push	r22
 3dc:	7f 93       	push	r23
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	af 93       	push	r26
 3e4:	bf 93       	push	r27
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
	//countFunc(count1,count2);
		count1++;
 3ea:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <count1>
 3ee:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <count1+0x1>
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <count1+0x1>
 3f8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <count1>
		displayNum(count1);
 3fc:	cf de       	rcall	.-610    	; 0x19c <displayNum>
		string(" ");	
 3fe:	87 ed       	ldi	r24, 0xD7	; 215
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	ba de       	rcall	.-652    	; 0x178 <string>
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0b be       	out	0x3b, r0	; 59
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <func>:
#include <avr/io.h>
#include <util/delay.h>
#include "lcd_lib.h"

void func(int angle)
{	
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	ec 01       	movw	r28, r24
	ICR1 = 19999;
 430:	8f e1       	ldi	r24, 0x1F	; 31
 432:	9e e4       	ldi	r25, 0x4E	; 78
 434:	97 bd       	out	0x27, r25	; 39
 436:	86 bd       	out	0x26, r24	; 38
	switch(angle){
 438:	ca 35       	cpi	r28, 0x5A	; 90
 43a:	d1 05       	cpc	r29, r1
 43c:	51 f1       	breq	.+84     	; 0x492 <func+0x68>
 43e:	c4 3b       	cpi	r28, 0xB4	; 180
 440:	d1 05       	cpc	r29, r1
 442:	09 f4       	brne	.+2      	; 0x446 <func+0x1c>
 444:	4e c0       	rjmp	.+156    	; 0x4e2 <func+0xb8>
 446:	20 97       	sbiw	r28, 0x00	; 0
 448:	09 f0       	breq	.+2      	; 0x44c <func+0x22>
 44a:	70 c0       	rjmp	.+224    	; 0x52c <func+0x102>
		case 0 ://command(0x01);	
				while(angle<180){
					OCR1A = 388 + (angle*(9.733));
 44c:	be 01       	movw	r22, r28
 44e:	0d 2e       	mov	r0, r29
 450:	00 0c       	add	r0, r0
 452:	88 0b       	sbc	r24, r24
 454:	99 0b       	sbc	r25, r25
 456:	09 d1       	rcall	.+530    	; 0x66a <__floatsisf>
 458:	2e e5       	ldi	r18, 0x5E	; 94
 45a:	3a eb       	ldi	r19, 0xBA	; 186
 45c:	4b e1       	ldi	r20, 0x1B	; 27
 45e:	51 e4       	ldi	r21, 0x41	; 65
 460:	90 d1       	rcall	.+800    	; 0x782 <__mulsf3>
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	42 ec       	ldi	r20, 0xC2	; 194
 468:	53 e4       	ldi	r21, 0x43	; 67
 46a:	6d d0       	rcall	.+218    	; 0x546 <__addsf3>
 46c:	d0 d0       	rcall	.+416    	; 0x60e <__fixunssfsi>
 46e:	7b bd       	out	0x2b, r23	; 43
 470:	6a bd       	out	0x2a, r22	; 42
 472:	2f e7       	ldi	r18, 0x7F	; 127
 474:	8a e1       	ldi	r24, 0x1A	; 26
 476:	96 e0       	ldi	r25, 0x06	; 6
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <func+0x4e>
 480:	00 c0       	rjmp	.+0      	; 0x482 <func+0x58>
 482:	00 00       	nop
					_delay_ms(2000);
					angle+=10;
 484:	2a 96       	adiw	r28, 0x0a	; 10
void func(int angle)
{	
	ICR1 = 19999;
	switch(angle){
		case 0 ://command(0x01);	
				while(angle<180){
 486:	c4 3b       	cpi	r28, 0xB4	; 180
 488:	d1 05       	cpc	r29, r1
 48a:	01 f7       	brne	.-64     	; 0x44c <func+0x22>
					OCR1A = 388 + (angle*(9.733));
					_delay_ms(2000);
					angle+=10;
				}
				command(0x01);
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	36 de       	rcall	.-916    	; 0xfc <command>
				break;
 490:	4d c0       	rjmp	.+154    	; 0x52c <func+0x102>
		case 90 :command(0x01);
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	33 de       	rcall	.-922    	; 0xfc <command>
				string("starting angle 90");
 496:	89 ed       	ldi	r24, 0xD9	; 217
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	6e de       	rcall	.-804    	; 0x178 <string>
				while(angle<180){
					OCR1A = 388 + (angle*(9.733));
 49c:	be 01       	movw	r22, r28
 49e:	0d 2e       	mov	r0, r29
 4a0:	00 0c       	add	r0, r0
 4a2:	88 0b       	sbc	r24, r24
 4a4:	99 0b       	sbc	r25, r25
 4a6:	e1 d0       	rcall	.+450    	; 0x66a <__floatsisf>
 4a8:	2e e5       	ldi	r18, 0x5E	; 94
 4aa:	3a eb       	ldi	r19, 0xBA	; 186
 4ac:	4b e1       	ldi	r20, 0x1B	; 27
 4ae:	51 e4       	ldi	r21, 0x41	; 65
 4b0:	68 d1       	rcall	.+720    	; 0x782 <__mulsf3>
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	42 ec       	ldi	r20, 0xC2	; 194
 4b8:	53 e4       	ldi	r21, 0x43	; 67
 4ba:	45 d0       	rcall	.+138    	; 0x546 <__addsf3>
 4bc:	a8 d0       	rcall	.+336    	; 0x60e <__fixunssfsi>
 4be:	7b bd       	out	0x2b, r23	; 43
 4c0:	6a bd       	out	0x2a, r22	; 42
 4c2:	2f e7       	ldi	r18, 0x7F	; 127
 4c4:	8a e1       	ldi	r24, 0x1A	; 26
 4c6:	96 e0       	ldi	r25, 0x06	; 6
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <func+0x9e>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <func+0xa8>
 4d2:	00 00       	nop
					_delay_ms(2000);
					angle+=10;
 4d4:	2a 96       	adiw	r28, 0x0a	; 10
				}
				command(0x01);
				break;
		case 90 :command(0x01);
				string("starting angle 90");
				while(angle<180){
 4d6:	c4 3b       	cpi	r28, 0xB4	; 180
 4d8:	d1 05       	cpc	r29, r1
 4da:	01 f7       	brne	.-64     	; 0x49c <func+0x72>
					OCR1A = 388 + (angle*(9.733));
					_delay_ms(2000);
					angle+=10;
				}
				command(0x01);
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e de       	rcall	.-996    	; 0xfc <command>
				break;
 4e0:	25 c0       	rjmp	.+74     	; 0x52c <func+0x102>
		case 180 :command(0x01);
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	0b de       	rcall	.-1002   	; 0xfc <command>
				  string("starting angle 180");
 4e6:	8b ee       	ldi	r24, 0xEB	; 235
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	46 de       	rcall	.-884    	; 0x178 <string>
				  while(angle > 0){
						OCR1A = 388 + (angle*(9.733));
 4ec:	be 01       	movw	r22, r28
 4ee:	0d 2e       	mov	r0, r29
 4f0:	00 0c       	add	r0, r0
 4f2:	88 0b       	sbc	r24, r24
 4f4:	99 0b       	sbc	r25, r25
 4f6:	b9 d0       	rcall	.+370    	; 0x66a <__floatsisf>
 4f8:	2e e5       	ldi	r18, 0x5E	; 94
 4fa:	3a eb       	ldi	r19, 0xBA	; 186
 4fc:	4b e1       	ldi	r20, 0x1B	; 27
 4fe:	51 e4       	ldi	r21, 0x41	; 65
 500:	40 d1       	rcall	.+640    	; 0x782 <__mulsf3>
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	42 ec       	ldi	r20, 0xC2	; 194
 508:	53 e4       	ldi	r21, 0x43	; 67
 50a:	1d d0       	rcall	.+58     	; 0x546 <__addsf3>
 50c:	80 d0       	rcall	.+256    	; 0x60e <__fixunssfsi>
 50e:	7b bd       	out	0x2b, r23	; 43
 510:	6a bd       	out	0x2a, r22	; 42
 512:	2f e7       	ldi	r18, 0x7F	; 127
 514:	8a e1       	ldi	r24, 0x1A	; 26
 516:	96 e0       	ldi	r25, 0x06	; 6
 518:	21 50       	subi	r18, 0x01	; 1
 51a:	80 40       	sbci	r24, 0x00	; 0
 51c:	90 40       	sbci	r25, 0x00	; 0
 51e:	e1 f7       	brne	.-8      	; 0x518 <func+0xee>
 520:	00 c0       	rjmp	.+0      	; 0x522 <func+0xf8>
 522:	00 00       	nop
						_delay_ms(2000);
						angle-=10;
 524:	2a 97       	sbiw	r28, 0x0a	; 10
				}
				command(0x01);
				break;
		case 180 :command(0x01);
				  string("starting angle 180");
				  while(angle > 0){
 526:	11 f7       	brne	.-60     	; 0x4ec <func+0xc2>
						OCR1A = 388 + (angle*(9.733));
						_delay_ms(2000);
						angle-=10;
				}
				command(0x01);
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	e8 dd       	rcall	.-1072   	; 0xfc <command>
				break;						
	}
}
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <pwmInit>:



void pwmInit(void)
{
	DDRB|=(1<<PINB5);
 532:	bd 9a       	sbi	0x17, 5	; 23
	PORTB|=(1<<PINB5);
 534:	c5 9a       	sbi	0x18, 5	; 24
	
	TCCR1A |= (1<<WGM11 )| (1<<COM1A1) ;
 536:	8f b5       	in	r24, 0x2f	; 47
 538:	82 68       	ori	r24, 0x82	; 130
 53a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11) ;
 53c:	8e b5       	in	r24, 0x2e	; 46
 53e:	8a 61       	ori	r24, 0x1A	; 26
 540:	8e bd       	out	0x2e, r24	; 46
 542:	08 95       	ret

00000544 <__subsf3>:
 544:	50 58       	subi	r21, 0x80	; 128

00000546 <__addsf3>:
 546:	bb 27       	eor	r27, r27
 548:	aa 27       	eor	r26, r26
 54a:	0e d0       	rcall	.+28     	; 0x568 <__addsf3x>
 54c:	e0 c0       	rjmp	.+448    	; 0x70e <__fp_round>
 54e:	d1 d0       	rcall	.+418    	; 0x6f2 <__fp_pscA>
 550:	30 f0       	brcs	.+12     	; 0x55e <__addsf3+0x18>
 552:	d6 d0       	rcall	.+428    	; 0x700 <__fp_pscB>
 554:	20 f0       	brcs	.+8      	; 0x55e <__addsf3+0x18>
 556:	31 f4       	brne	.+12     	; 0x564 <__addsf3+0x1e>
 558:	9f 3f       	cpi	r25, 0xFF	; 255
 55a:	11 f4       	brne	.+4      	; 0x560 <__addsf3+0x1a>
 55c:	1e f4       	brtc	.+6      	; 0x564 <__addsf3+0x1e>
 55e:	c6 c0       	rjmp	.+396    	; 0x6ec <__fp_nan>
 560:	0e f4       	brtc	.+2      	; 0x564 <__addsf3+0x1e>
 562:	e0 95       	com	r30
 564:	e7 fb       	bst	r30, 7
 566:	bc c0       	rjmp	.+376    	; 0x6e0 <__fp_inf>

00000568 <__addsf3x>:
 568:	e9 2f       	mov	r30, r25
 56a:	e2 d0       	rcall	.+452    	; 0x730 <__fp_split3>
 56c:	80 f3       	brcs	.-32     	; 0x54e <__addsf3+0x8>
 56e:	ba 17       	cp	r27, r26
 570:	62 07       	cpc	r22, r18
 572:	73 07       	cpc	r23, r19
 574:	84 07       	cpc	r24, r20
 576:	95 07       	cpc	r25, r21
 578:	18 f0       	brcs	.+6      	; 0x580 <__addsf3x+0x18>
 57a:	71 f4       	brne	.+28     	; 0x598 <__addsf3x+0x30>
 57c:	9e f5       	brtc	.+102    	; 0x5e4 <__addsf3x+0x7c>
 57e:	fa c0       	rjmp	.+500    	; 0x774 <__fp_zero>
 580:	0e f4       	brtc	.+2      	; 0x584 <__addsf3x+0x1c>
 582:	e0 95       	com	r30
 584:	0b 2e       	mov	r0, r27
 586:	ba 2f       	mov	r27, r26
 588:	a0 2d       	mov	r26, r0
 58a:	0b 01       	movw	r0, r22
 58c:	b9 01       	movw	r22, r18
 58e:	90 01       	movw	r18, r0
 590:	0c 01       	movw	r0, r24
 592:	ca 01       	movw	r24, r20
 594:	a0 01       	movw	r20, r0
 596:	11 24       	eor	r1, r1
 598:	ff 27       	eor	r31, r31
 59a:	59 1b       	sub	r21, r25
 59c:	99 f0       	breq	.+38     	; 0x5c4 <__addsf3x+0x5c>
 59e:	59 3f       	cpi	r21, 0xF9	; 249
 5a0:	50 f4       	brcc	.+20     	; 0x5b6 <__addsf3x+0x4e>
 5a2:	50 3e       	cpi	r21, 0xE0	; 224
 5a4:	68 f1       	brcs	.+90     	; 0x600 <__addsf3x+0x98>
 5a6:	1a 16       	cp	r1, r26
 5a8:	f0 40       	sbci	r31, 0x00	; 0
 5aa:	a2 2f       	mov	r26, r18
 5ac:	23 2f       	mov	r18, r19
 5ae:	34 2f       	mov	r19, r20
 5b0:	44 27       	eor	r20, r20
 5b2:	58 5f       	subi	r21, 0xF8	; 248
 5b4:	f3 cf       	rjmp	.-26     	; 0x59c <__addsf3x+0x34>
 5b6:	46 95       	lsr	r20
 5b8:	37 95       	ror	r19
 5ba:	27 95       	ror	r18
 5bc:	a7 95       	ror	r26
 5be:	f0 40       	sbci	r31, 0x00	; 0
 5c0:	53 95       	inc	r21
 5c2:	c9 f7       	brne	.-14     	; 0x5b6 <__addsf3x+0x4e>
 5c4:	7e f4       	brtc	.+30     	; 0x5e4 <__addsf3x+0x7c>
 5c6:	1f 16       	cp	r1, r31
 5c8:	ba 0b       	sbc	r27, r26
 5ca:	62 0b       	sbc	r22, r18
 5cc:	73 0b       	sbc	r23, r19
 5ce:	84 0b       	sbc	r24, r20
 5d0:	ba f0       	brmi	.+46     	; 0x600 <__addsf3x+0x98>
 5d2:	91 50       	subi	r25, 0x01	; 1
 5d4:	a1 f0       	breq	.+40     	; 0x5fe <__addsf3x+0x96>
 5d6:	ff 0f       	add	r31, r31
 5d8:	bb 1f       	adc	r27, r27
 5da:	66 1f       	adc	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	c2 f7       	brpl	.-16     	; 0x5d2 <__addsf3x+0x6a>
 5e2:	0e c0       	rjmp	.+28     	; 0x600 <__addsf3x+0x98>
 5e4:	ba 0f       	add	r27, r26
 5e6:	62 1f       	adc	r22, r18
 5e8:	73 1f       	adc	r23, r19
 5ea:	84 1f       	adc	r24, r20
 5ec:	48 f4       	brcc	.+18     	; 0x600 <__addsf3x+0x98>
 5ee:	87 95       	ror	r24
 5f0:	77 95       	ror	r23
 5f2:	67 95       	ror	r22
 5f4:	b7 95       	ror	r27
 5f6:	f7 95       	ror	r31
 5f8:	9e 3f       	cpi	r25, 0xFE	; 254
 5fa:	08 f0       	brcs	.+2      	; 0x5fe <__addsf3x+0x96>
 5fc:	b3 cf       	rjmp	.-154    	; 0x564 <__addsf3+0x1e>
 5fe:	93 95       	inc	r25
 600:	88 0f       	add	r24, r24
 602:	08 f0       	brcs	.+2      	; 0x606 <__addsf3x+0x9e>
 604:	99 27       	eor	r25, r25
 606:	ee 0f       	add	r30, r30
 608:	97 95       	ror	r25
 60a:	87 95       	ror	r24
 60c:	08 95       	ret

0000060e <__fixunssfsi>:
 60e:	98 d0       	rcall	.+304    	; 0x740 <__fp_splitA>
 610:	88 f0       	brcs	.+34     	; 0x634 <__fixunssfsi+0x26>
 612:	9f 57       	subi	r25, 0x7F	; 127
 614:	90 f0       	brcs	.+36     	; 0x63a <__fixunssfsi+0x2c>
 616:	b9 2f       	mov	r27, r25
 618:	99 27       	eor	r25, r25
 61a:	b7 51       	subi	r27, 0x17	; 23
 61c:	a0 f0       	brcs	.+40     	; 0x646 <__fixunssfsi+0x38>
 61e:	d1 f0       	breq	.+52     	; 0x654 <__fixunssfsi+0x46>
 620:	66 0f       	add	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	88 1f       	adc	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	1a f0       	brmi	.+6      	; 0x630 <__fixunssfsi+0x22>
 62a:	ba 95       	dec	r27
 62c:	c9 f7       	brne	.-14     	; 0x620 <__fixunssfsi+0x12>
 62e:	12 c0       	rjmp	.+36     	; 0x654 <__fixunssfsi+0x46>
 630:	b1 30       	cpi	r27, 0x01	; 1
 632:	81 f0       	breq	.+32     	; 0x654 <__fixunssfsi+0x46>
 634:	9f d0       	rcall	.+318    	; 0x774 <__fp_zero>
 636:	b1 e0       	ldi	r27, 0x01	; 1
 638:	08 95       	ret
 63a:	9c c0       	rjmp	.+312    	; 0x774 <__fp_zero>
 63c:	67 2f       	mov	r22, r23
 63e:	78 2f       	mov	r23, r24
 640:	88 27       	eor	r24, r24
 642:	b8 5f       	subi	r27, 0xF8	; 248
 644:	39 f0       	breq	.+14     	; 0x654 <__fixunssfsi+0x46>
 646:	b9 3f       	cpi	r27, 0xF9	; 249
 648:	cc f3       	brlt	.-14     	; 0x63c <__fixunssfsi+0x2e>
 64a:	86 95       	lsr	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b3 95       	inc	r27
 652:	d9 f7       	brne	.-10     	; 0x64a <__fixunssfsi+0x3c>
 654:	3e f4       	brtc	.+14     	; 0x664 <__fixunssfsi+0x56>
 656:	90 95       	com	r25
 658:	80 95       	com	r24
 65a:	70 95       	com	r23
 65c:	61 95       	neg	r22
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	8f 4f       	sbci	r24, 0xFF	; 255
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	08 95       	ret

00000666 <__floatunsisf>:
 666:	e8 94       	clt
 668:	09 c0       	rjmp	.+18     	; 0x67c <__floatsisf+0x12>

0000066a <__floatsisf>:
 66a:	97 fb       	bst	r25, 7
 66c:	3e f4       	brtc	.+14     	; 0x67c <__floatsisf+0x12>
 66e:	90 95       	com	r25
 670:	80 95       	com	r24
 672:	70 95       	com	r23
 674:	61 95       	neg	r22
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	8f 4f       	sbci	r24, 0xFF	; 255
 67a:	9f 4f       	sbci	r25, 0xFF	; 255
 67c:	99 23       	and	r25, r25
 67e:	a9 f0       	breq	.+42     	; 0x6aa <__floatsisf+0x40>
 680:	f9 2f       	mov	r31, r25
 682:	96 e9       	ldi	r25, 0x96	; 150
 684:	bb 27       	eor	r27, r27
 686:	93 95       	inc	r25
 688:	f6 95       	lsr	r31
 68a:	87 95       	ror	r24
 68c:	77 95       	ror	r23
 68e:	67 95       	ror	r22
 690:	b7 95       	ror	r27
 692:	f1 11       	cpse	r31, r1
 694:	f8 cf       	rjmp	.-16     	; 0x686 <__floatsisf+0x1c>
 696:	fa f4       	brpl	.+62     	; 0x6d6 <__floatsisf+0x6c>
 698:	bb 0f       	add	r27, r27
 69a:	11 f4       	brne	.+4      	; 0x6a0 <__floatsisf+0x36>
 69c:	60 ff       	sbrs	r22, 0
 69e:	1b c0       	rjmp	.+54     	; 0x6d6 <__floatsisf+0x6c>
 6a0:	6f 5f       	subi	r22, 0xFF	; 255
 6a2:	7f 4f       	sbci	r23, 0xFF	; 255
 6a4:	8f 4f       	sbci	r24, 0xFF	; 255
 6a6:	9f 4f       	sbci	r25, 0xFF	; 255
 6a8:	16 c0       	rjmp	.+44     	; 0x6d6 <__floatsisf+0x6c>
 6aa:	88 23       	and	r24, r24
 6ac:	11 f0       	breq	.+4      	; 0x6b2 <__floatsisf+0x48>
 6ae:	96 e9       	ldi	r25, 0x96	; 150
 6b0:	11 c0       	rjmp	.+34     	; 0x6d4 <__floatsisf+0x6a>
 6b2:	77 23       	and	r23, r23
 6b4:	21 f0       	breq	.+8      	; 0x6be <__floatsisf+0x54>
 6b6:	9e e8       	ldi	r25, 0x8E	; 142
 6b8:	87 2f       	mov	r24, r23
 6ba:	76 2f       	mov	r23, r22
 6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <__floatsisf+0x5e>
 6be:	66 23       	and	r22, r22
 6c0:	71 f0       	breq	.+28     	; 0x6de <__floatsisf+0x74>
 6c2:	96 e8       	ldi	r25, 0x86	; 134
 6c4:	86 2f       	mov	r24, r22
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	2a f0       	brmi	.+10     	; 0x6d6 <__floatsisf+0x6c>
 6cc:	9a 95       	dec	r25
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	da f7       	brpl	.-10     	; 0x6cc <__floatsisf+0x62>
 6d6:	88 0f       	add	r24, r24
 6d8:	96 95       	lsr	r25
 6da:	87 95       	ror	r24
 6dc:	97 f9       	bld	r25, 7
 6de:	08 95       	ret

000006e0 <__fp_inf>:
 6e0:	97 f9       	bld	r25, 7
 6e2:	9f 67       	ori	r25, 0x7F	; 127
 6e4:	80 e8       	ldi	r24, 0x80	; 128
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	08 95       	ret

000006ec <__fp_nan>:
 6ec:	9f ef       	ldi	r25, 0xFF	; 255
 6ee:	80 ec       	ldi	r24, 0xC0	; 192
 6f0:	08 95       	ret

000006f2 <__fp_pscA>:
 6f2:	00 24       	eor	r0, r0
 6f4:	0a 94       	dec	r0
 6f6:	16 16       	cp	r1, r22
 6f8:	17 06       	cpc	r1, r23
 6fa:	18 06       	cpc	r1, r24
 6fc:	09 06       	cpc	r0, r25
 6fe:	08 95       	ret

00000700 <__fp_pscB>:
 700:	00 24       	eor	r0, r0
 702:	0a 94       	dec	r0
 704:	12 16       	cp	r1, r18
 706:	13 06       	cpc	r1, r19
 708:	14 06       	cpc	r1, r20
 70a:	05 06       	cpc	r0, r21
 70c:	08 95       	ret

0000070e <__fp_round>:
 70e:	09 2e       	mov	r0, r25
 710:	03 94       	inc	r0
 712:	00 0c       	add	r0, r0
 714:	11 f4       	brne	.+4      	; 0x71a <__fp_round+0xc>
 716:	88 23       	and	r24, r24
 718:	52 f0       	brmi	.+20     	; 0x72e <__fp_round+0x20>
 71a:	bb 0f       	add	r27, r27
 71c:	40 f4       	brcc	.+16     	; 0x72e <__fp_round+0x20>
 71e:	bf 2b       	or	r27, r31
 720:	11 f4       	brne	.+4      	; 0x726 <__fp_round+0x18>
 722:	60 ff       	sbrs	r22, 0
 724:	04 c0       	rjmp	.+8      	; 0x72e <__fp_round+0x20>
 726:	6f 5f       	subi	r22, 0xFF	; 255
 728:	7f 4f       	sbci	r23, 0xFF	; 255
 72a:	8f 4f       	sbci	r24, 0xFF	; 255
 72c:	9f 4f       	sbci	r25, 0xFF	; 255
 72e:	08 95       	ret

00000730 <__fp_split3>:
 730:	57 fd       	sbrc	r21, 7
 732:	90 58       	subi	r25, 0x80	; 128
 734:	44 0f       	add	r20, r20
 736:	55 1f       	adc	r21, r21
 738:	59 f0       	breq	.+22     	; 0x750 <__fp_splitA+0x10>
 73a:	5f 3f       	cpi	r21, 0xFF	; 255
 73c:	71 f0       	breq	.+28     	; 0x75a <__fp_splitA+0x1a>
 73e:	47 95       	ror	r20

00000740 <__fp_splitA>:
 740:	88 0f       	add	r24, r24
 742:	97 fb       	bst	r25, 7
 744:	99 1f       	adc	r25, r25
 746:	61 f0       	breq	.+24     	; 0x760 <__fp_splitA+0x20>
 748:	9f 3f       	cpi	r25, 0xFF	; 255
 74a:	79 f0       	breq	.+30     	; 0x76a <__fp_splitA+0x2a>
 74c:	87 95       	ror	r24
 74e:	08 95       	ret
 750:	12 16       	cp	r1, r18
 752:	13 06       	cpc	r1, r19
 754:	14 06       	cpc	r1, r20
 756:	55 1f       	adc	r21, r21
 758:	f2 cf       	rjmp	.-28     	; 0x73e <__fp_split3+0xe>
 75a:	46 95       	lsr	r20
 75c:	f1 df       	rcall	.-30     	; 0x740 <__fp_splitA>
 75e:	08 c0       	rjmp	.+16     	; 0x770 <__fp_splitA+0x30>
 760:	16 16       	cp	r1, r22
 762:	17 06       	cpc	r1, r23
 764:	18 06       	cpc	r1, r24
 766:	99 1f       	adc	r25, r25
 768:	f1 cf       	rjmp	.-30     	; 0x74c <__fp_splitA+0xc>
 76a:	86 95       	lsr	r24
 76c:	71 05       	cpc	r23, r1
 76e:	61 05       	cpc	r22, r1
 770:	08 94       	sec
 772:	08 95       	ret

00000774 <__fp_zero>:
 774:	e8 94       	clt

00000776 <__fp_szero>:
 776:	bb 27       	eor	r27, r27
 778:	66 27       	eor	r22, r22
 77a:	77 27       	eor	r23, r23
 77c:	cb 01       	movw	r24, r22
 77e:	97 f9       	bld	r25, 7
 780:	08 95       	ret

00000782 <__mulsf3>:
 782:	0b d0       	rcall	.+22     	; 0x79a <__mulsf3x>
 784:	c4 cf       	rjmp	.-120    	; 0x70e <__fp_round>
 786:	b5 df       	rcall	.-150    	; 0x6f2 <__fp_pscA>
 788:	28 f0       	brcs	.+10     	; 0x794 <__mulsf3+0x12>
 78a:	ba df       	rcall	.-140    	; 0x700 <__fp_pscB>
 78c:	18 f0       	brcs	.+6      	; 0x794 <__mulsf3+0x12>
 78e:	95 23       	and	r25, r21
 790:	09 f0       	breq	.+2      	; 0x794 <__mulsf3+0x12>
 792:	a6 cf       	rjmp	.-180    	; 0x6e0 <__fp_inf>
 794:	ab cf       	rjmp	.-170    	; 0x6ec <__fp_nan>
 796:	11 24       	eor	r1, r1
 798:	ee cf       	rjmp	.-36     	; 0x776 <__fp_szero>

0000079a <__mulsf3x>:
 79a:	ca df       	rcall	.-108    	; 0x730 <__fp_split3>
 79c:	a0 f3       	brcs	.-24     	; 0x786 <__mulsf3+0x4>

0000079e <__mulsf3_pse>:
 79e:	95 9f       	mul	r25, r21
 7a0:	d1 f3       	breq	.-12     	; 0x796 <__mulsf3+0x14>
 7a2:	95 0f       	add	r25, r21
 7a4:	50 e0       	ldi	r21, 0x00	; 0
 7a6:	55 1f       	adc	r21, r21
 7a8:	62 9f       	mul	r22, r18
 7aa:	f0 01       	movw	r30, r0
 7ac:	72 9f       	mul	r23, r18
 7ae:	bb 27       	eor	r27, r27
 7b0:	f0 0d       	add	r31, r0
 7b2:	b1 1d       	adc	r27, r1
 7b4:	63 9f       	mul	r22, r19
 7b6:	aa 27       	eor	r26, r26
 7b8:	f0 0d       	add	r31, r0
 7ba:	b1 1d       	adc	r27, r1
 7bc:	aa 1f       	adc	r26, r26
 7be:	64 9f       	mul	r22, r20
 7c0:	66 27       	eor	r22, r22
 7c2:	b0 0d       	add	r27, r0
 7c4:	a1 1d       	adc	r26, r1
 7c6:	66 1f       	adc	r22, r22
 7c8:	82 9f       	mul	r24, r18
 7ca:	22 27       	eor	r18, r18
 7cc:	b0 0d       	add	r27, r0
 7ce:	a1 1d       	adc	r26, r1
 7d0:	62 1f       	adc	r22, r18
 7d2:	73 9f       	mul	r23, r19
 7d4:	b0 0d       	add	r27, r0
 7d6:	a1 1d       	adc	r26, r1
 7d8:	62 1f       	adc	r22, r18
 7da:	83 9f       	mul	r24, r19
 7dc:	a0 0d       	add	r26, r0
 7de:	61 1d       	adc	r22, r1
 7e0:	22 1f       	adc	r18, r18
 7e2:	74 9f       	mul	r23, r20
 7e4:	33 27       	eor	r19, r19
 7e6:	a0 0d       	add	r26, r0
 7e8:	61 1d       	adc	r22, r1
 7ea:	23 1f       	adc	r18, r19
 7ec:	84 9f       	mul	r24, r20
 7ee:	60 0d       	add	r22, r0
 7f0:	21 1d       	adc	r18, r1
 7f2:	82 2f       	mov	r24, r18
 7f4:	76 2f       	mov	r23, r22
 7f6:	6a 2f       	mov	r22, r26
 7f8:	11 24       	eor	r1, r1
 7fa:	9f 57       	subi	r25, 0x7F	; 127
 7fc:	50 40       	sbci	r21, 0x00	; 0
 7fe:	8a f0       	brmi	.+34     	; 0x822 <__mulsf3_pse+0x84>
 800:	e1 f0       	breq	.+56     	; 0x83a <__mulsf3_pse+0x9c>
 802:	88 23       	and	r24, r24
 804:	4a f0       	brmi	.+18     	; 0x818 <__mulsf3_pse+0x7a>
 806:	ee 0f       	add	r30, r30
 808:	ff 1f       	adc	r31, r31
 80a:	bb 1f       	adc	r27, r27
 80c:	66 1f       	adc	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	91 50       	subi	r25, 0x01	; 1
 814:	50 40       	sbci	r21, 0x00	; 0
 816:	a9 f7       	brne	.-22     	; 0x802 <__mulsf3_pse+0x64>
 818:	9e 3f       	cpi	r25, 0xFE	; 254
 81a:	51 05       	cpc	r21, r1
 81c:	70 f0       	brcs	.+28     	; 0x83a <__mulsf3_pse+0x9c>
 81e:	60 cf       	rjmp	.-320    	; 0x6e0 <__fp_inf>
 820:	aa cf       	rjmp	.-172    	; 0x776 <__fp_szero>
 822:	5f 3f       	cpi	r21, 0xFF	; 255
 824:	ec f3       	brlt	.-6      	; 0x820 <__mulsf3_pse+0x82>
 826:	98 3e       	cpi	r25, 0xE8	; 232
 828:	dc f3       	brlt	.-10     	; 0x820 <__mulsf3_pse+0x82>
 82a:	86 95       	lsr	r24
 82c:	77 95       	ror	r23
 82e:	67 95       	ror	r22
 830:	b7 95       	ror	r27
 832:	f7 95       	ror	r31
 834:	e7 95       	ror	r30
 836:	9f 5f       	subi	r25, 0xFF	; 255
 838:	c1 f7       	brne	.-16     	; 0x82a <__mulsf3_pse+0x8c>
 83a:	fe 2b       	or	r31, r30
 83c:	88 0f       	add	r24, r24
 83e:	91 1d       	adc	r25, r1
 840:	96 95       	lsr	r25
 842:	87 95       	ror	r24
 844:	97 f9       	bld	r25, 7
 846:	08 95       	ret

00000848 <__itoa_ncheck>:
 848:	bb 27       	eor	r27, r27
 84a:	4a 30       	cpi	r20, 0x0A	; 10
 84c:	31 f4       	brne	.+12     	; 0x85a <__itoa_ncheck+0x12>
 84e:	99 23       	and	r25, r25
 850:	22 f4       	brpl	.+8      	; 0x85a <__itoa_ncheck+0x12>
 852:	bd e2       	ldi	r27, 0x2D	; 45
 854:	90 95       	com	r25
 856:	81 95       	neg	r24
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	01 c0       	rjmp	.+2      	; 0x85e <__utoa_common>

0000085c <__utoa_ncheck>:
 85c:	bb 27       	eor	r27, r27

0000085e <__utoa_common>:
 85e:	fb 01       	movw	r30, r22
 860:	55 27       	eor	r21, r21
 862:	aa 27       	eor	r26, r26
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	aa 1f       	adc	r26, r26
 86a:	a4 17       	cp	r26, r20
 86c:	10 f0       	brcs	.+4      	; 0x872 <__utoa_common+0x14>
 86e:	a4 1b       	sub	r26, r20
 870:	83 95       	inc	r24
 872:	50 51       	subi	r21, 0x10	; 16
 874:	b9 f7       	brne	.-18     	; 0x864 <__utoa_common+0x6>
 876:	a0 5d       	subi	r26, 0xD0	; 208
 878:	aa 33       	cpi	r26, 0x3A	; 58
 87a:	08 f0       	brcs	.+2      	; 0x87e <__utoa_common+0x20>
 87c:	a9 5d       	subi	r26, 0xD9	; 217
 87e:	a1 93       	st	Z+, r26
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	79 f7       	brne	.-34     	; 0x862 <__utoa_common+0x4>
 884:	b1 11       	cpse	r27, r1
 886:	b1 93       	st	Z+, r27
 888:	11 92       	st	Z+, r1
 88a:	cb 01       	movw	r24, r22
 88c:	00 c0       	rjmp	.+0      	; 0x88e <strrev>

0000088e <strrev>:
 88e:	dc 01       	movw	r26, r24
 890:	fc 01       	movw	r30, r24
 892:	67 2f       	mov	r22, r23
 894:	71 91       	ld	r23, Z+
 896:	77 23       	and	r23, r23
 898:	e1 f7       	brne	.-8      	; 0x892 <strrev+0x4>
 89a:	32 97       	sbiw	r30, 0x02	; 2
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <strrev+0x18>
 89e:	7c 91       	ld	r23, X
 8a0:	6d 93       	st	X+, r22
 8a2:	70 83       	st	Z, r23
 8a4:	62 91       	ld	r22, -Z
 8a6:	ae 17       	cp	r26, r30
 8a8:	bf 07       	cpc	r27, r31
 8aa:	c8 f3       	brcs	.-14     	; 0x89e <strrev+0x10>
 8ac:	08 95       	ret

000008ae <_exit>:
 8ae:	f8 94       	cli

000008b0 <__stop_program>:
 8b0:	ff cf       	rjmp	.-2      	; 0x8b0 <__stop_program>
